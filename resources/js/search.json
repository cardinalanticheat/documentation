[[{"l":"Welcome","p":["Cardinal Anticheat is a minecraft anticheat that uses more than a hundred different checks to make players have a hard time hacking into your server. Each check is unique and designed specifically for Cardinal Anticheat. So there are currently no hack clients that can easily bypass Cardinal Anticheat. This offers a great advantage in keeping your server safe from hackers while known anti-cheats can't do the job."]},{"l":"Testserver","p":["If you are interested but don't want to buy a license right away try, you are welcome to join the official public testserver","In case the server is offline, please join the official discord server and give me a notice that you want to test the anticheat on the testserver."]},{"l":"Custom ban manager","p":["By default Cardinal Anticheat doesn't handle a database connection. The reason is farily easy to understand. Cardinal Anticheat is a close source plugin whose source is never on the server physically. This has legitimate security and privacy concerns.","That's why you can tell cardinal anticheat in the Config.yml which commands should be executed in case of a ban etc."]},{"l":"Built-in ban system","p":["As already stated does Cardinal Anticheat not handle any database connections by default, however using the build-in ban system requires you to use a so called dialect which you have to write yourself. The documentation for writing a dialect is available here.","Due to inquiries I have already written a dialect for the mongo and mysql driver. You can download them here"]},{"l":"Report system","p":["Maybe you don't want a player to be banned right away or lower the chance of banning a legit player. For this reason it makes sense to use Cardinal's report system. Each flag is saved in the database using a dialect and based on the number and type of flags, a moderator can decide for himself when a player should be banned. For example you only ban the 10% of players with the most falgs each month etc. Maybe you want to introduce some form of trust factor and scale damage and recoil as a result. You might want to let players with similar trust factors play against each other. If you are a developer and want to get to implement such a system, the possibilities are limitless."]},{"l":"Addons","p":["Cardinal also allows loading, developing and sharing addons. There are already some addons on my discord server. Furthermore, there is a rather good documentation for developsers on how to write your own addons here."]}],[{"l":"Addons","p":["To get a Git project into your build:","Add the JitPack repository to your build file","Add the dependency","Make sure to NOT export the source into your addon but use compileOnly for gradle and provided for maven.","After adding the addon api as a dependency, start by implementing Addon.","Unlike spigot, a file called addon.json must be created like following:"]}],[{"l":"Command System","p":["To handle commands you have to implement Command"]},{"l":"Register Commands","p":["You can register commands just like events with Extension.registerCommand"]}],[{"l":"Event System","p":["As you already know, you have to implement Listener in a class you want to use bukkit events. In case you also want to use the build-in events of the Cardinal-Anticheat you have to implement EventListener. That's because Cardinal-Anticheat has an entire different event-system. It's possible to use bukkit events and cardinal events in the same class by implementing both classes.","The next difference is that Cardinal-Anticheat uses the annotation @EventManager.Target above methods. The annotation also ships with its own modifiers resulting in events being called asynchronous. This behavior can be changed by setting the isSync property to true.","Keep in mind, that asynchronous events cannot be cancelled. For a complete overview of all events, visit the javadoc reference."]},{"l":"Register Events","p":["You can register events by calling Extension.registerListener"]}],[{"l":"Config"}],[{"l":"Permissions"}]]